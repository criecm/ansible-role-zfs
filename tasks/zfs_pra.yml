---
#    {{ inventory_hostname }} est l'hote d'origine
#    {{ pra_host }} la machine de sauvegarde
#
# replication
# needs zfs_pra_scripts script on pra host
- name: check zfs_pra_scripts on source AND dest hosts
  stat:
    path: '{{ zfs_pra_scripts }}/sync_zfs_pra_from.sh'
  register: statzfsprasync
  delegate_to: '{{ pra_host }}'

- name: check zfs_pra_scripts
  stat:
    path: '{{ zfs_pra_scripts }}/send_zfs_pra.sh'
  register: statzfsprasend

- name: fail if scripts missing
  fail:
    msg: "Missing zfs_pra scripts on source or destination"
  when: not statzfsprasync.stat.exists or not statzfsprasend.stat.exists
  ignore_errors: "{{ ansible_check_mode }}"

- name: ssh key
  command: 'ssh-keygen -t rsa -N "" -f ~/.ssh/id_ed25519_sync'
  args:
    creates: '~/.ssh/id_ed25519_sync'
  delegate_to: '{{ pra_host }}'

- name: get ssh key
  command: 'cat ~/.ssh/id_ed25519_sync.pub'
  changed_when: False
  register: zfssh_key
  delegate_to: '{{ pra_host }}'

- name: has server pra's ssh key ?
  command: 'fgrep {{ zfssh_key.stdout | regex_replace("ssh-[a-z0-9]* ([^ ]*)( .*)?$","\1") }} ~root/.ssh/authorized_keys'
  changed_when: False
  failed_when: False
  register: sshalready

- name: put pra ssh key on host (tmp)
  authorized_key:
    key: '{{ zfssh_key.stdout }}'
    user: root
    state: present
    key_options: 'command="{{ zfs_pra_scripts }}/send_zfs_pra.sh"'
  when: zfssh_key.stdout_lines | count > 0 and sshalready.rc > 0
# and first_ssh.stdout_lines > 0

- name: make first ssh connection from pra host (known_hosts + get client IP)
  command: 'ssh -i ~/.ssh/id_ed25519_sync -oStrictHostKeyChecking=no -oIdentitiesOnly=yes -oKbdInteractiveAuthentication=no -oUpdateHostKeys=yes {{ inventory_hostname
  }} connect'
  register: first_ssh
  changed_when: False
  failed_when: first_ssh.stdout_lines | count == 0
  delegate_to: '{{ pra_host }}'

- name: put pra ssh key on host with 'from='
  authorized_key:
    key: '{{ zfssh_key.stdout }}'
    user: root
    state: present
    key_options: 'command="{{ zfs_pra_scripts }}/send_zfs_pra.sh",from="{{ first_ssh.stdout_lines[0] | regex_replace(" .* ok$","") }},{{ pra_host }}"'
  when: zfssh_key.stdout_lines | count > 0 and first_ssh.stdout_lines | count > 0

- name: show pra shares for {{ pra_host }}
  debug:
    msg: '{{ shares | selectattr("zfsrc","defined") | selectattr("pra_on","defined")
    | selectattr("pra_on","search","^"+pra_host+":") | map(attribute="zfsrc") | join(",") }}'
  delegate_to: '{{ pra_host }}'

- name: delete old sync cron
  cron: 
    name: 'backup {{ zfs.zfsrc }} from {{ inventory_hostname }}'
    state: absent
  with_items: '{{ shares | selectattr("zfsrc","defined") | selectattr("pra_on","defined") | selectattr("pra_on","search","^"+pra_host+":") | list }}'
  loop_control:
    loop_var: zfs
    label: '{{ pra_host }}:{{ zfs.zfsrc }}'
  register: oldcron
  delegate_to: '{{ pra_host }}'

- name: install zfs_sync crontab
  cron:
    name: 'pra {{ zfs.zfsrc }} from {{ inventory_hostname }}'
    job: '{{ zfs_pra_scripts }}/sync_zfs_pra_from.sh ~/.ssh/id_ed25519_sync {{ ansible_hostname }}:{{ zfs.zfsrc }} {{ zfs.pra_on
    | regex_replace("^[^:]+:","") }} 36h15d8w12m1y'
    minute: '{{ zfs.pra_minute | default( 59 | random(seed=zfs.zfsrc)) }}'
    hour: '{{ zfs.pra_hour | default("*") }}'
  with_items: '{{ shares | selectattr("zfsrc","defined") | selectattr("pra_on","defined") | selectattr("pra_on","search","^"+pra_host+":") | list }}'
  loop_control:
    loop_var: zfs
    label: '{{ pra_host }}:{{ zfs.zfsrc }}'
  delegate_to: '{{ pra_host }}'
