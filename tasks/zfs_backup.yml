---
#    {{ inventory_hostname }} est l'hote d'origine
#    {{ backup_host }} la machine de sauvegarde
#
# replication
# needs zfs_sync_vol script on backup host
- name: ssh key
  command: 'ssh-keygen -t rsa -N "" -f ~/.ssh/id_rsa_{{ ansible_hostname }}'
  args:
    creates: '~/.ssh/id_rsa_{{ ansible_hostname }}'
  delegate_to: '{{ backup_host }}'

- name: get ssh key
  command: 'cat ~/.ssh/id_rsa_{{ ansible_hostname }}.pub'
  check_mode: False
  changed_when: False
  register: zfssh_key
  delegate_to: '{{ backup_host }}'

- name: has server backup's ssh key ?
  command: 'fgrep {{ zfssh_key.stdout | regex_replace("ssh-[a-z0-9]* ([^ ]*)( .*)?$","\1") }} ~root/.ssh/authorized_keys'
  changed_when: False
  check_mode: False
  failed_when: False
  register: sshalready

- name: put backup ssh key on host (tmp)
  authorized_key:
    key: '{{ zfssh_key.stdout }}'
    user: root
    state: present
#    key_options: 'from="{{ first_ssh.stdout_lines[0] | regex_replace("\.$","") }},{{ ansible_hostname }}"'
  when: zfssh_key.stdout_lines > 0 and sshalready.rc > 0
# and first_ssh.stdout_lines > 0

- name: make first ssh connection from backup (known_hosts + get client IP)
  command: |
    ssh -i ~/.ssh/id_rsa_{{ ansible_hostname }} -oStrictHostKeyChecking=no -oIdentitiesOnly=yes -oKbdInteractiveAuthentication=no -oUpdateHostKeys=yes {{ inventory_hostname }} 'echo ${SSH_CLIENT%% *}'
  register: first_ssh
  check_mode: False
  changed_when: False
  failed_when: first_ssh.stdout_lines | count == 0
  delegate_to: '{{ backup_host }}'

- name: put backup ssh key on host with 'from='
  authorized_key:
    key: '{{ zfssh_key.stdout }}'
    user: root
    state: present
    key_options: 'from="{{ first_ssh.stdout_lines[0] | regex_replace("\.$","") }},{{ backup_host }}"'
  when: zfssh_key.stdout_lines > 0 and first_ssh.stdout_lines > 0

- name: check zfs_sync_vol
  stat:
    path: '{{ zfs_sync_vol | default("/root/zfs_sync_vol") }}'
  register: statzsv
  delegate_to: '{{ backup_host }}'

- block:
  - name: install zfs_sync_vol if needed
    fetch:
      dest: /root/zfs_sync_vol
      src: https://github.com/criecm/savscript/raw/master/lib/zfs_sync_vol
  - name: chmod +x
    file:
      path: /root/zfs_sync_vol
      mode: '0755'
  when: not statzsv.stat.exists
  delegate_to: '{{ backup_host }}'

- name: newsyslog FreeBSD
  block:
    - file:
        path: /usr/local/etc/newsyslog.conf.d
        state: directory
    - copy:
        dest: /usr/local/etc/newsyslog.conf.d/zfs_sync.conf
        content: |
          /var/log/zfs_sync_*.log 644 30  * @T00  JG
        mode: '0644'
  when: ansible_os_family == "FreeBSD"
  delegate_to: '{{ backup_host }}'

- debug:
    msg: '{{ shares | selectattr("zfsrc","defined") | selectattr("backup_on","defined") | selectattr("backup_on","search","@"+backup_host+"$") | map(attribute="zfsrc") | join(",") }}'
  delegate_to: '{{ backup_host }}'

- name: install zfs_sync crontab
  cron:
    name: 'backup {{ zfs.zfsrc }} from {{ inventory_hostname }}'
    job: '{{ zfs_sync_vol | default("/root/zfs_sync_vol") }} -k ~/.ssh/id_rsa_{{ ansible_hostname }} -BRIC -uU {{ zfs.zfsrc }}@{{ ansible_hostname }} {{ zfs.backup_on | regex_replace("@.*$","") }} >> /var/log/zfs_sync_{{ zfs.zfsrc | regex_replace("/","_") }}.log'
    minute: '{{ zfs.backup_minute | default( 59 | random(seed=zfs.zfsrc)) }}'
    hour: '{{ zfs.backup_hour | default("*") }}'
  with_items: '{{ shares | selectattr("zfsrc","defined") | selectattr("backup_on","defined") | selectattr("backup_on","search","@"+backup_host) | list }}'
  loop_control:
    loop_var: zfs
    label: '{{ zfs.zfsrc }}@{{ backup_host }}'
  delegate_to: '{{ backup_host }}'

